#) What is TypeScript ?
 TypeScript is a syntactic superset of JavaScript which adds static typing.This basically means that TypeScript adds syntax on top of 
JavaScript, allowing developers to add types.
TypeScript being a "Syntactic Superset" means that it shares the same base syntax as JavaScript, but adds something to it.
JavaScript is a loosely typed language. It can be difficult to understand what types of data are being passed around in JavaScript.
In JavaScript, function parameters and variables don't have any information! So developers need to look at documentation, or guess based 
on the implementation.
TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running 
the code.

Here are some key features and benefits of TypeScript:
1) Static Typing:: TypeScript introduces static types, enabling developers to catch type-related errors at compile-time rather than 
runtime. This helps in identifying and fixing issues earlier in the development process.

2) Enhanced Tooling:: TypeScript provides excellent editor support with features like code navigation, auto-completion, and refactoring 
tools. Editors like Visual Studio Code have built-in TypeScript support, making development more efficient

3) Modern JavaScript Features:: TypeScript supports modern JavaScript features such as classes, interfaces, arrow functions, async/await, 
and modules, making it suitable for building complex applications.

4) Compatibility:: TypeScript is designed to be compatible with existing JavaScript code. It allows gradual adoption, so developers can 
start using TypeScript in parts of their projects without rewriting everything.

5) Open Source and Community-driven:: TypeScript is open source and has a large community contributing to its development. This ensures 
ongoing support, frequent updates, and a wealth of resources available for learning and troubleshooting.

===========================================================================================================================================
#) Type annotations and type inference:--  In TypeScript, type annotations and type inference are important concepts that help developers 
specify and understand the types of values in their code.

Type Annotations:: - Type annotations in TypeScript are explicit declarations where you specify the type of a variable, function 
parameter, or function return value. They provide clarity about the expected types and help TypeScript catch type-related errors during 
development. 
EXAMPLE::-
// Variable annotation
let myNumber: number = 10;
let myString: string = "Hello";

// Function parameter annotations
function addNumbers(x: number, y: number): number {
    return x + y;
}

// Function return type annotation
function greet(name: string): string {
    return `Hello, ${name}!`;
}

Type Inference:: -  Type inference is TypeScript’s ability to automatically deduce the type of a variable, parameter, or function return 
value based on its initialization or usage. TypeScript analyzes the values assigned and how they are used to determine the most 
appropriate type.
EXAMPLE:: -
      // Type inference for variables
let myNumber = 10; // TypeScript infers myNumber is of type number
let myString = "Hello"; // TypeScript infers myString is of type string

// Type inference for function return type
function addNumbers(x: number, y: number) {
    return x + y; // TypeScript infers the return type is number
}

// Type inference for function parameters
function logMessage(message: string) {
    console.log(message);
}

logMessage("Hello, TypeScript!"); // TypeScript infers the argument is of type string

           -When to Use Annotations vs. Inference:-
Annotations: Use type annotations when you want to explicitly specify types for variables, function parameters, or return values. This is 
useful for documenting your code and ensuring type safety in more complex scenarios.

Inference: TypeScript’s type inference is powerful and often sufficient for simpler cases where types can be easily deduced from 
initialization or usage. It reduces verbosity in your code and improves readability.

===========================================================================================================================================
#) In TypeScript, type assertions (also known as type casting in some other languages) are a way to tell the compiler that you know more 
about the type of a value than TypeScript does. It is useful when you know the type of a value could be more specific than its current 
inferred type, or when you need to convert a type in a way that TypeScript cannot automatically infer.

Type Assertions
Type assertions have two forms in TypeScript:

1) Angle-bracket syntax:-
let someValue: any = "this is a string";
let strLength: number = (<string>someValue).length;

2) As-syntax (preferred in TypeScript):-
let someValue: any = "this is a string";
let strLength: number = (someValue as string).length;

Examples of Basic Types:::--
1) String:- use the string data type to represents the text in TypeScript.String type work with textual data. We include string literals 
in our scripts by enclosing them in single or double quotation marks.
Syntax: - let myName: string = "John Doe";

2) Number: - Like JavaScript, all the numbers in TypeScript are stored as floating-point values. These numeric values are treated like a 
number data type. The numeric data type can be used to represents both integers and fractions.
Syntax: - let first: number = 12.0;  let myAge: number = 30;

3) Boolean: - The string and numeric data types can have an unlimited number of different values, whereas the Boolean data type can have 
only two values. They are "true" and "false."
Syntax: -  let isStudent: boolean = true;

4) Arrays: -An array is a collection of elements of the same data type. Like JavaScript, TypeScript also allows us to work with arrays of 
values.
Syntax: - 
let numbers: number[] = [1, 2, 3, 4];
let fruits: Array<string> = ["Apple", "Banana", "Orange"];

5) Tuples: - The Tuple is a data type which includes two sets of values of different data types. It allows us to express an array where 
the type of a fixed number of elements is known, but they are not the same. For example, if we want to represent a value as a pair of a 
number and a string, then it can be written as:
Syntax: - 
// Declare a tuple  
let a: [string, number];  
  
// Initialize it  
a = ["hi", 8, "how", 5]; // OK 

6) Enums: -  Enums stands for Enumerations.Enums are a new data type supported in TypeScript. It is used to define the set of named 
constants, i.e., a collection of related values. TypeScript supports both numeric and string-based enums. We can define the enums by using 
the enum keyword.
Syntax: -
 enum Color {
    Red,
    Green,
    Blue,
}
let myColor: Color = Color.Green;

7) Any: - It is the "super type" of all data type in TypeScript. It is used to represents any JavaScript value.It allows us to opt-in and 
opt-out of type-checking during compilation. If a variable cannot be represented in any of the basic data types, then it can be declared 
using "Any" data type. Any type is useful when we do not know about the type of value (which might come from an API or 3rd party library), 
and we want to skip the type-checking on compile time.
Syntax: - let identifier: any = value;
1. let val: any = 'Hi';  
      val = 555;   // OK  
      val = true;   // OK    

8) Void: - A void is a return type of the functions which do not return any type of value. It is used where no data type is available. A 
variable of type void is not useful because we can only assign undefined or null to them. An undefined data type denotes uninitialized 
variable, whereas null represents a variable whose value is undefined.
Syntax :- let unusable: void = undefined;  

function logMessage(message: string): void {
    console.log(message);
}

9) Null and Undefined: - 
     Null represents a variable whose value is undefined. Much like the void, it is not extremely useful on its own. The Null accepts the 
only one value, which is null. The Null keyword is used to define the Null type in TypeScript, but it is not useful because we can only 
assign a null value to it.
Syntax: - 
let num: number = null;  
let bool: boolean = null;   
let str: string = null;  

The Undefined primitive type denotes all uninitialized variables in TypeScript and JavaScript. It has only one value, which is undefined. 
The undefined keyword defines the undefined type in TypeScript, but it is not useful because we can only assign an undefined value to it.
Syntax: - 
let num: number = undefined;  
let bool: boolean = undefined;  
let str: string = undefined;  


===========================================================================================================================================
#) Interfaces and Types ::: - 
In TypeScript, interfaces and types are used to define the shape or structure of data, allowing developers to specify the expected 
structure of objects, functions, and other data types within their codebase. While they serve similar purposes, there are some differences 
in how they can be used.

Interfaces : -  Interfaces in TypeScript are primarily used to define object types. They describe the properties and methods that an 
object should have. Interfaces can also be extended to create new interfaces, providing a way to build on existing definitions.
Sytax: - 
interface Person {
    firstName: string;
    lastName: string;
    age: number;
    greet(): string;
}
Usage: -  
function greetPerson(person: Person) {
    return `Hello, ${person.firstName} ${person.lastName}!`;
}
let myPerson: Person = {
    firstName: "John",
    lastName: "Doe",
    age: 30,
    greet() {
        return "Hi there!";
    }
};
console.log(greetPerson(myPerson)); // Outputs: Hello, John Doe!

Key Points:

*)Interfaces are purely a compile-time construct and do not generate any JavaScript code. They are used for type checking and providing 
structure to objects.
*)Interfaces can be extended and can inherit from multiple other interfaces.
*)They are often used for defining contracts that objects must adhere to.


Types : - In TypeScript, type is a more flexible construct that can represent any valid TypeScript type. It can describe primitive types, 
union types, tuple types, function types, and more complex types.
Syntax: -
   type Point = {
    x: number;
    y: number;
};

type Shape = "circle" | "square" | "triangle";
type Logger = (message: string) => void;

Usage: -

let point: Point = { x: 10, y: 20 };
let shape: Shape = "circle";
let logMessage: Logger = (message) => {
    console.log(message);
};

logMessage("Hello, TypeScript!"); // Outputs: Hello, TypeScript!

Key Points:

*)Types can alias any valid TypeScript type, including primitives, unions, intersections, and even other types.
T*)hey can be used to create reusable type definitions and combine existing types in various ways.
*)Types are also a compile-time feature and do not generate any runtime code.

--------:::Choosing Between Interfaces and Types::----
Use Interfaces When: - 

a) Defining the structure of an object or class.
B) Needing to extend or implement from another interface.

Use Types When: - 
a) Creating reusable type aliases.
b) Working with union types, intersection types, or more complex type combinations.
c) Describing types that cannot be represented with interfaces, such as primitive types or union types.


===========================================================================================================================================
#) What is the difference between type and interface in TypeScript?
Types in TypeScript are more flexible and can define primitive, intersection, union, tuple, or different types of data, while interfaces 
are used to describe the shape of an object. Types use the type keyword for creating new type, while interfaces use the interface keyword 
for declaring an interface.


===========================================================================================================================================
#) Optional properties and readonly properties : - 
 Optional Properties :- Optional properties are properties that may or may not be present in an object. They are denoted by placing a ? 
after the property name in the interface definition.
EXAMPLE : - 
 interface Person {
    name: string;
    age?: number; // Optional property
}

const person1: Person = {
    name: 'Alice',
    age: 30,
};

const person2: Person = {
    name: 'Bob',
    // age is optional and can be omitted
};

Readonly Properties : - Readonly properties are properties that can only be initialized once and cannot be changed afterward. They are 
denoted using the readonly keyword.
EXAMPLE : -  
          interface Point {
    readonly x: number;
    readonly y: number;
}

let p1: Point = { x: 10, y: 20 };
// p1.x = 5; // Error: Cannot assign to 'x' because it is a read-only property
console.log(p1.x); // Output: 10


===========================================================================================================================================
#) Union types and intersection types ? 
In TypeScript, union types and intersection types are powerful features that allow you to combine different types in various ways, 
providing flexibility and expressiveness in your type definitions.

a) Union Types (|) : - Union types are used when a value can be more than a single type. Such as when a property would be string or number.
They are defined using the `|` operator between the types.
Syntax : -  type MyType = Type1 | Type2 | Type3;

EXAMPLE : -
type ID = string | number;
function printID(id: ID) {
    console.log(id);
}
printID("abc"); // Valid
printID(123);   // Valid
printID(true);  // Error: Argument of type 'boolean' is not assignable to parameter of type 'ID'.

b) Intersection Types (&) : - Intersection types allow you to combine multiple types into one. The resulting type will have all properties 
that exist in all of the constituent types.
Syntax: -  type MyType = Type1 & Type2 & Type3;
EXAMPLE : -
   interface Car {
    brand: string;
    model: string;
}

interface Electric {
    batteryCapacity: number;
}
type ElectricCar = Car & Electric;
const myCar: ElectricCar = {
    brand: "Tesla",
    model: "Model S",
    batteryCapacity: 100
};

Key Differences:
Union Types (|): A value of a union type can be of any of the specified types.
Intersection Types (&): A value of an intersection type has all of the specified types combined.

===========================================================================================================================================
#) Conditional types (using extends) ?
Conditional types in TypeScript are a powerful feature that allows you to create types that depend on other types. They are typically 
defined using the extends keyword within a conditional block (T extends U ? X : Y). This syntax enables TypeScript to infer types based on 
the evaluation of type relationships.
Basic Syntax: -   type MyConditionalType<T> = T extends U ? X : Y;

Example : - 
type ExtractPropertyType<T, K extends keyof T> = K extends keyof T ? T[K] : never;
interface Person {
    name: string;
    age: number;
    address: string;
}

type PersonProps = ExtractPropertyType<Person, "name" | "age">;
// PersonProps is string | number, because "name" | "age" are keys of Person


===========================================================================================================================================
#) Typing function parameters and return types ? 
















































































































































































